#include <Eigen/Dense>
#include <iostream>

using namespace Eigen;
using namespace std;

// Economic SVD using eigendecomposition
void eigSVD(const auto& A, auto& U, auto& S, auto& V) {
    auto B = A.transpose() * A;

    SelfAdjointEigenSolver<std::decay_t<decltype(B)>> eig(B);
    if (eig.info() != Success) {
        cerr << "Eigen decomposition failed!" << endl;
        return;
    }

    auto d = eig.eigenvalues().array().abs().sqrt();
    S = d.matrix().asDiagonal();

    auto Vfull = eig.eigenvectors();
    auto temp = A * Vfull;

    for (Index i = 0; i < d.size(); ++i) {
        if (d(i) > 1e-12) {
            temp.col(i) /= d(i);
        } else {
            temp.col(i).setZero();
        }
    }

    U = temp;
    V = Vfull;
}

// Randomized SVD without explicitly stating matrix dimensions/types
void randomizedSVD(const auto& A, int k, int p, auto& U, auto& S, auto& V) {
    int l = k + p;
    auto Omega = A.transpose() * MatrixXd::Random(A.cols(), l);
    auto Y = A * Omega;

    HouseholderQR qr(Y);
    auto Q = qr.householderQ() * decltype(A)::Identity(A.rows(), l);

    auto B = Q.transpose() * A;

    decltype(A) U_tilde, S_tilde, V_tilde;
    eigSVD(B, U_tilde, S_tilde, V_tilde);

    U = Q * U_tilde;
    S = S_tilde;
    V = V_tilde;
}

// Usage example (with dynamic data)
int main() {
    auto A = Eigen::MatrixXd::Random(5, 3);  // Replace with dynamic input

    decltype(A) U, S, V;
    int k = 2, p = 2;

    randomizedSVD(A, k, p, U, S, V);

    cout << "U:\n" << U << "\nS:\n" << S << "\nV:\n" << V << endl;
    cout << "Approx A:\n" << U * S * V.transpose() << endl;

    return 0;
}
